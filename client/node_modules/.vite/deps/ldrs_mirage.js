import {
  __publicField
} from "./chunk-WXXH56N5.js";

// node_modules/ldrs/dist/lib/LdrsBaseElement.js
var t = class extends HTMLElement {
  constructor() {
    super();
    __publicField(this, "_propsToUpgrade", {});
    __publicField(this, "shadow");
    __publicField(this, "template");
    __publicField(this, "defaultProps");
    __publicField(this, "isAttached", false);
    this.shadow = this.attachShadow({ mode: "open" }), this.template = document.createElement("template");
  }
  storePropsToUpgrade(t3) {
    t3.forEach((t4) => {
      this.hasOwnProperty(t4) && void 0 !== this[t4] && (this._propsToUpgrade[t4] = this[t4], delete this[t4]);
    });
  }
  upgradeStoredProps() {
    Object.entries(this._propsToUpgrade).forEach(([t3, e]) => {
      this.setAttribute(t3, e);
    });
  }
  reflect(t3) {
    t3.forEach((t4) => {
      Object.defineProperty(this, t4, { set(e) {
        "string,number".includes(typeof e) ? this.setAttribute(t4, e.toString()) : this.removeAttribute(t4);
      }, get() {
        return this.getAttribute(t4);
      } });
    });
  }
  applyDefaultProps(t3) {
    this.defaultProps = t3, Object.entries(t3).forEach(([t4, e]) => {
      this[t4] = this[t4] || e.toString();
    });
  }
};

// node_modules/ldrs/dist/elements/mirage.js
var i = ":host{--uib-dot-size:calc(var(--uib-size)*0.23);align-items:center;display:inline-flex;flex-shrink:0;height:var(--uib-dot-size);justify-content:center;width:var(--uib-size)}:host([hidden]){display:none}.container{align-items:center;display:flex;filter:url(#uib-jelly-ooze);justify-content:space-between;position:relative;width:var(--uib-size)}.container,.dot{height:var(--uib-dot-size)}.dot{animation:stream var(--uib-speed) linear infinite both;background-color:var(--uib-color);border-radius:50%;display:block;left:calc(0px - var(--uib-dot-size)/2);position:absolute;top:calc(50% - var(--uib-dot-size)/2);transition:background-color .3s ease;width:var(--uib-dot-size)}.dot:nth-child(2){animation-delay:calc(var(--uib-speed)*-.2)}.dot:nth-child(3){animation-delay:calc(var(--uib-speed)*-.4)}.dot:nth-child(4){animation-delay:calc(var(--uib-speed)*-.6)}.dot:nth-child(5){animation-delay:calc(var(--uib-speed)*-.8)}@keyframes stream{0%,to{transform:translateX(0) scale(0)}50%{transform:translateX(calc(var(--uib-size)*.5)) scale(1)}99.999%{transform:translateX(calc(var(--uib-size))) scale(0)}}";
var t2 = class extends t {
  constructor() {
    super();
    __publicField(this, "_attributes", ["size", "color", "speed"]);
    __publicField(this, "size");
    __publicField(this, "color");
    __publicField(this, "speed");
    this.storePropsToUpgrade(this._attributes), this.reflect(this._attributes);
  }
  static get observedAttributes() {
    return ["size", "color", "speed"];
  }
  connectedCallback() {
    this.upgradeStoredProps(), this.applyDefaultProps({ size: 60, color: "black", speed: 2.5 }), this.template.innerHTML = `
      <div class="container">
        <div class="dot"></div>
        <div class="dot"></div>
        <div class="dot"></div>
        <div class="dot"></div>
        <div class="dot"></div>
      </div>
      <svg width="0" height="0" class="svg">
        <defs>
          <filter id="uib-jelly-ooze">
            <feGaussianBlur
              in="SourceGraphic"
              stdDeviation=${parseInt(this.size) / 20}
              result="blur"
            />
            <feColorMatrix
              in="blur"
              mode="matrix"
              values="1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 18 -7"
              result="ooze"
            />
            <feBlend in="SourceGraphic" in2="ooze" />
          </filter>
        </defs>
      </svg>
      <style>
        :host{
          --uib-size: ${this.size}px;
          --uib-color: ${this.color};
          --uib-speed: ${this.speed}s;
        }
        ${i}
      </style>
    `, this.shadow.replaceChildren(this.template.content.cloneNode(true));
  }
  attributeChangedCallback() {
    const e = this.shadow.querySelector("style");
    e && (e.innerHTML = `
      :host{
        --uib-size: ${this.size}px;
        --uib-color: ${this.color};
        --uib-speed: ${this.speed}s;
      }
      ${i}
    `);
  }
};
var s = { register: (e = "l-mirage") => {
  customElements.get(e) || customElements.define(e, class extends t2 {
  });
}, element: t2 };

// node_modules/ldrs/dist/auto/mirage.js
s.register();
//# sourceMappingURL=ldrs_mirage.js.map
